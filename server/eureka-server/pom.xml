<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <modelVersion>4.0.0</modelVersion>

    <groupId>com.chenhe</groupId>
    <version>1.0.1</version>
    <artifactId>eureka-server</artifactId>
    <packaging>jar</packaging>

    <parent>
        <groupId>com.chenhe</groupId>
        <artifactId>server</artifactId>
        <version>1.0-SNAPSHOT</version>
        <relativePath>../pom.xml</relativePath>
    </parent>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <java.version>1.8</java.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>

    </dependencies>

    <build>
        <plugins>

            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
            <!--<plugin>
                <groupId>com.spotify</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>1.0.0</version>
                <executions>
                    &lt;!&ndash;执行 mvn package 时 自动 执行 mvn docker:build&ndash;&gt;
                    <execution>
                        <id>build-image</id>
                        <phase>package</phase>
                        <goals>
                            <goal>build</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    &lt;!&ndash;推送到私有仓库&ndash;&gt;
                    &lt;!&ndash; <imageName>localhost:5000/fox/fox-eureka-server</imageName> &ndash;&gt;
                    &lt;!&ndash;本地&ndash;&gt;
                    <imageName>registry.cn-beijing.aliyuncs.com/ch-docker/chenhe-docker</imageName>
                    <imageTags>
                        <imageTag>1.0.1</imageTag>
                        &lt;!&ndash;可以指定多个标签&ndash;&gt;
                        <imageTag>latest</imageTag>
                    </imageTags>
                    &lt;!&ndash;覆盖已存在的标签 镜像&ndash;&gt;
                    <forceTags>true</forceTags>
                    &lt;!&ndash;使用pom 配置&ndash;&gt;
                    &lt;!&ndash;<baseImage>java</baseImage>&ndash;&gt;
                    &lt;!&ndash;<entryPoint>["java","-jar","/${project.build.finalName}.jar"]</entryPoint>&ndash;&gt;
                    &lt;!&ndash;使用pom 配置 END&ndash;&gt;
                    &lt;!&ndash;使用 Dockerfile&ndash;&gt;
                    <dockerDirectory>${project.basedir}/</dockerDirectory>
                    &lt;!&ndash;使用 Dockerfile  END&ndash;&gt;
                    <resources>
                        <resource>
                            <targetPath>/</targetPath>
                            <directory>${project.build.directory}</directory>
                            <include>${project.build.finalName}.jar</include>
                        </resource>
                    </resources>
                </configuration>
            </plugin>-->
        </plugins>
    </build>


</project>