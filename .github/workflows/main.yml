# This is a basic workflow to help you get started with Actions

name: SpringCloudDemo-CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches:
    - master
    - develop

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:

    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:

    - uses: actions/checkout@v2

    # 执行打包操作
    - name: 设置JDK为1.8版本
      uses: actions/setup-java@v1
      with:
        java-version: 1.8

    - name: 开始打包
      run: mvn -B package --file pom.xml -Dmaven.test.skip=true

    - name: 构建并上传上传eureka镜像
      env:
        aliyun_username: ${{ secrets.aliyun_username }}
        aliyun_password: ${{ secrets.aliyun_password }}
        image_registry_server: registry.cn-beijing.aliyuncs.com
        image_registry_url: registry.cn-beijing.aliyuncs.com/ch-docker/springcloud-eureka
        image_name: springclouddemo-eureka
        image_tag: latest
      run: |
        sudo docker login --username=${aliyun_username} ${image_registry_server} --password=${{ secrets.aliyun_password }}
        sudo docker build -t ${image_name}:${image_tag} ./server/eureka-server/
        sudo docker tag ${image_name}:${image_tag} ${image_registry_url}:${image_tag}
        sudo docker push ${image_registry_url}:${image_tag}

    - name: 构建并上传上传Config镜像
      env:
        aliyun_username: ${{ secrets.aliyun_username }}
        aliyun_password: ${{ secrets.aliyun_password }}
        image_registry_server: registry.cn-beijing.aliyuncs.com
        image_registry_url: registry.cn-beijing.aliyuncs.com/ch-docker/springcloud-config
        image_name: springclouddemo-config
        image_tag: latest
      run: |
        sudo docker login --username=${aliyun_username} ${image_registry_server} --password=${{ secrets.aliyun_password }}
        sudo docker build -t ${image_name}:${image_tag} ./server/config-server/
        sudo docker tag ${image_name}:${image_tag} ${image_registry_url}:${image_tag}
        sudo docker push ${image_registry_url}:${image_tag}